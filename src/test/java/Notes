features = maps where feature files are located in our framework
glue = maps where class files are located in our framework
dryRun = it checks for every step in feature file, corresponding code is written or not,
         if not, it will autogenerate

---------------------------------------------

HOOKS#HOOKS: For defining pre and post steps in any cucumber framework
       #       This is a class and always created inside the StepDefinitions folder
       #       This class cannot be inherited to another class
       #       Hooks will take care of pre and post conditions irrespective of what goes in between test steps

       #to comment in feature file, use hash sign.
_______________________________


Different ways to pull data to Java
1. Hard Code - don't do this
2. property file
3. regular expression - used when you only have limited data.
4. Scenario outline - provides an alternative to DDT
   - Parametrization can be achieved through Scenario Outline
    - Data Driven
    -always come with examples keyword
    -opens and close browser for every data

5. Data Table
    -executes all data before closing

****Cucumber itself provides multiple option through which we can feed data from feature file into Step Definition
-Regular Expressions - put the data in double qoutes

------------------

PARAMETERIZATION = executing the same test cases with multiple data
                    = In TestNG, data provider.
                    Data Driven Testing - your data is available in an external source and you are pulling it.

---------------------------------

PageObjectModel
1. will take care of all your webElements
in Selenium = pageFactoryModel
2. An object repository

***Try catch = use whenever you are dealing with an external folder

----------------------------------
SUREFIRE - MAVEN SUREFIRE PLUGIN



-----------------------------MAVEN LIFE CYCLE---------------------------
1. Clean - removes all the files generated by the previous build
2. Validate - Checks the project is correct and ll the necessary information available
3. Compile - compiles the source code of the project
4. test - runs tests for the project
5. package - packages the compiled code into a distributable format such as JAR or WAR file
6. verify - runs and checks on results of integration tests to ensure quality criteria is met
7. install - installs the packages into local repository
8. site - generates documentation for the project
9. deploy - copies the final package to remote repository or sharing with other developers.